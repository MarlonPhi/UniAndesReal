package co.edu.uniandes.fuse.api.academico.routes;


import org.apache.camel.LoggingLevel;
import org.apache.camel.model.rest.RestParamType;

import co.edu.uniandes.fuse.api.academico.beans.notas.NotasService;
import co.edu.uniandes.fuse.api.academico.models.notas.CalificadosMaxMIn;
import co.edu.uniandes.fuse.api.academico.models.notas.NotaEstudiante;
import co.edu.uniandes.fuse.api.academico.models.notas.NotaHistorico;
import co.edu.uniandes.fuse.api.academico.models.notas.NotaHomologada;
import co.edu.uniandes.fuse.api.academico.models.notas.PromedioAcumulado;
import co.edu.uniandes.fuse.api.academico.models.notas.PromedioSeccion;
import co.edu.uniandes.fuse.api.academico.models.notas.PromedioSemestre;
import co.edu.uniandes.fuse.api.academico.processors.ValidateErrorProcessor;
import co.edu.uniandes.fuse.api.academico.processors.notas.ValidateParamsNotasHomologadasProcessor;
import co.edu.uniandes.fuse.api.academico.processors.notas.ValidateParamCRNProcessor;
import co.edu.uniandes.fuse.api.academico.processors.notas.ValidateParamCodCurProcessor;
import co.edu.uniandes.fuse.api.academico.processors.notas.ValidateParamNivProcessor;
import co.edu.uniandes.fuse.api.academico.processors.notas.ValidateParamPerNivProcessor;
import co.edu.uniandes.fuse.api.academico.processors.notas.ValidateParamPerProcessor;
import co.edu.uniandes.fuse.core.utils.models.ErrorResponse;

public class NotasRoute extends RestConfiguration{

	public void configure() throws Exception {
		// EXCEPTIONS       
        onException(Exception.class)
             .handled(true)
             .to("direct-vm:manageException");
    	
        // ------- RESTS -----------------------------------------------------------------------------
        rest("/notas")
        	.get("/homologadas")
        		.description("Consulta las notas homologadas de un estudiante ")				
        		.consumes("application/json").produces("application/json")
				.param()
					.name("snumerodocumento").description("Documento de Identificaci&oacute;n del estudiante.  <br> Ejemplo: 79940821 ")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("slogin").description("login academico del estudiante. <br> Ejemplo: id.ruiz25")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("scodigo").description("C&oacute;digo academico del estudiante.  <br>  Ejemplo: 199521959 ")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("spidm").description("Documento de Identificaci&oacute;n del estudiante.  <br> Ejemplo: 79940821 ")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("snombrecurso").description("Nombre del curso. <br>  Ejemplo: LENG")
					.type(RestParamType.query)
					.required(true)
				.endParam()
				.param()
					.name("scodigocurso").description("C&oacute;digo del curso. <br> Ejemplo: 112")
					.type(RestParamType.query)
					.required(true)
				.endParam()
				.param()
					.name("snivel").description("Nivel acad&eacute;mico del estudiante. <br> Ejemplo: PR")
					.type(RestParamType.query)
					.required(true)
				.endParam()
				.outType(NotaHomologada[].class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()        	
				.to("direct:obtenerNotasHomologadas")
			
			.get("/promedioAcumulado")
	        	.description("Consulta promedio acumulado de notas de un estudiante ")				
	        	.consumes("application/json").produces("application/json")
	        	.param()
					.name("snumerodocumento").description("Documento de Identificaci&oacute;n del estudiante. <br> Ejemplo: 80843479")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("slogin").description("Login acad&eacute;mico del estudiante. <br> Ejemplo: cafanador")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("scodigo").description("C&oacute;digo acad&eacute;mico del estudiante. <br> Ejemplo: 201021881")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("speriodo").description("Periodo acad&eacute;mico. <br> Ejemplo: 201720")
					.type(RestParamType.query) 
					.required(true)
				.endParam()
				.param()
					.name("snivel").description("Nivel acad&eacute;mico del estudiante. <br> Ejemplo: MA")
					.type(RestParamType.query)
					.required(true)
				.endParam()
			.outType(PromedioAcumulado.class)
			.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
			.to("direct:obtenerPromedioAcumulado")
		
			.get("/estudiante")
				.description("Consulta las notas de un estudiante")				
	        	.consumes("application/json").produces("application/json")
				.param()
					.name("snumerodocumento").description("Documento de Identificaci&oacute;n del estudiante. <br> Ejemplo: 80843479")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("slogin").description("Login acad&eacute;mico del estudiante. <br> Ejemplo: cafanador")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("speriodo").description("Periodo acad&eacute;mico. <br> Ejemplo: 201720")
					.type(RestParamType.query) 
					.required(true)
				.endParam()
			.outType(NotaEstudiante[].class)
			.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
			.to("direct:obtenerNotasEstudiante")
		    
			.get("/historico")
				.description("Consulta el historico de notas de un estudiante")				
	        	.consumes("application/json").produces("application/json")
				.param()
					.name("snumerodocumento").description("Documento de Identificaci&oacute;n del estudiante. <br> Ejemplo: 80843479")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("slogin").description("Login acad&eacute;mico del estudiante. <br> Ejemplo: cafanador")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("scodigo").description("C&oacute;digo acad&eacute;mico del estudiante. <br> Ejemplo: 201021881")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("snombrecurso").description("Nombre del curso. <br> Ejemplo: MATE")
					.type(RestParamType.query) 
					.required(false)
				.endParam()
				.param()
					.name("scodigocurso").description("C&oacute;digo del curso. <br> Ejemplo: 1203")
					.type(RestParamType.query) 
					.required(false)
				.endParam()
				.param()
					.name("scrn").description("CRN del curso. <br> Ejemplo: 20856")
					.type(RestParamType.query) 
					.required(false)
				.endParam()
				.param()
					.name("snivel").description("Nivel acad&eacute;mico del curso. <br> Ejemplo: PR")
					.type(RestParamType.query) 
					.required(false)
				.endParam()
				.param()
					.name("speriodo").description("Periodo acad&eacute;mico. <br> Ejemplo: 201210")
					.type(RestParamType.query) 
					.required(false)
				.endParam()
			.outType(NotaHistorico[].class)
			.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
			.to("direct:obtenerNotasHistorico")
			
			.get("/promedioSeccion")
				.description("Consulta el historico de notas de un estudiante")				
	        	.consumes("application/json").produces("application/json")
	        	.param()
					.name("scrn").description("CRN del curso. <br> Ejemplo: 20856")
					.type(RestParamType.query) 
					.required(true)
				.endParam()
				.param()
					.name("speriodo").description("Periodo acad&eacute;mico. <br> Ejemplo: 201210")
					.type(RestParamType.query) 
					.required(true)
				.endParam()
				.param()
					.name("snivel").description("Nivel acad&eacute;mico del curso. <br> Ejemplo: PR")
					.type(RestParamType.query) 
					.required(false)
				.endParam()
	        	.outType(PromedioSeccion.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:obtenerNotasPromedioSeccion")
				
			.get("/promedioSemestre")
				.description("Consulta el historico de notas de un estudiante")				
	        	.consumes("application/json").produces("application/json")
	        	.param()
					.name("slogin").description("Login acad&eacute;mico del estudiante. <br> Ejemplo: cafanador")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("snumerodocumento").description("Documento de Identificaci&oacute;n del estudiante. <br> Ejemplo: 80843479")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("scodigo").description("C&oacute;digo acad&eacute;mico del estudiante. <br> Ejemplo: 201021881")
					.type(RestParamType.query)
					.required(false)
				.endParam()	
				.param()
					.name("snivel").description("Nivel acad&eacute;mico del curso. <br> Ejemplo: MA")
					.type(RestParamType.query) 
					.required(true)
				.endParam()
				.param()
					.name("speriodo").description("Periodo acad&eacute;mico. <br> Ejemplo: 201610")
					.type(RestParamType.query) 
					.required(true)
				.endParam()
	        	.outType(PromedioSemestre.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:obtenerPromedioSemestre")
				
			.get("/semestreCalificado/maximoYminimo")
				.description("Servicio que consulta y retorna el m&aacute;ximo y el m&iacute;nimo semestre calificado de un estudiante")				
	        	.consumes("application/json").produces("application/json")
	        	.param()
					.name("slogin").description("Login acad&eacute;mico del estudiante. <br> Ejemplo: cafanador")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("snumerodocumento").description("Documento de Identificaci&oacute;n del estudiante. <br> Ejemplo: 80843479")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("scodigo").description("C&oacute;digo acad&eacute;mico del estudiante. <br> Ejemplo: 201021881")
					.type(RestParamType.query)
					.required(false)
				.endParam()	
				.param()
					.name("snivel").description("Nivel acad&eacute;mico del curso. <br> Ejemplo: MA")
					.type(RestParamType.query) 
					.required(true)
				.endParam()
	        	.outType(CalificadosMaxMIn.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:obtenerCalificadoMaxMin")
			
			.get("/sicua")
				.description("Consulta el historico de notas de un estudiante")				
	        	.consumes("application/json").produces("application/json")
	        	.outType(PromedioSemestre.class)
	        	.param()
					.name("slogin").description("Login acad&eacute;mico del estudiante. <br> Ejemplo: cafanador")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("snumerodocumento").description("Documento de Identificaci&oacute;n del estudiante. <br> Ejemplo: 80843479")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("scodigo").description("C&oacute;digo acad&eacute;mico del estudiante. <br> Ejemplo: 201021881")
					.type(RestParamType.query)
					.required(false)
				.endParam()	
				.param()
					.name("scodigocurso").description("C&oacute;digo del curso. <br> Ejemplo: 201420_ARTI4106_01")
					.type(RestParamType.query) 
					.required(false)
				.endParam()
				.outType(PromedioSemestre.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:obtenerNotasSicua")
		;
    	

        
        //---- OBTENER NOTAS HOMOLOGADAS ----
        from("direct:obtenerNotasHomologadas")
        	.to("direct:set-authentication")
        	.to("direct:validatePidmData")
        	.process(new ValidateParamsNotasHomologadasProcessor())
    		.to("direct:pidmRoute")
    		.choice()
    			.when(simple("${property.ContinueProcedure} != true"))
		    		.log(LoggingLevel.ERROR,"::::: Error en Consultar SPIDM")
	    			.setHeader("CamelHttpResponseCode", simple("404"))
					.process(new ValidateErrorProcessor())
	    		.otherwise()
	    			.to("velocity:template/notas/query-notas-homologadas.vm")
	    			.setHeader("CamelSqlQuery").simple("${body}")
	    			.to("direct:bannerSQL")
	    			.log("${body}")
	    			.choice()
	    				.when(simple("${header.CamelHttpResponseCode} != 200"))
	    					.process(new ValidateErrorProcessor())
	    				.otherwise()
	    				.log("Query response ::::::::: ${body}")
	    				.bean(NotasService.class, "getNotasHomologadas")
	    			.end()
	    			
	    	.end();
	    	
        //---- OBTENER PROMEDIO ACUMULADO ----
         from("direct:obtenerPromedioAcumulado")
        	.to("direct:set-authentication")
        	.to("direct:validatePidmData")
        	.process(new ValidateParamPerNivProcessor())
    		.to("direct:pidmRoute")
    		.choice()	
    			.when(simple("${property.ContinueProcedure} != true"))
		    		.log(LoggingLevel.ERROR," :::: Error en Consultar SPIDM")
		    		.setHeader("CamelHttpResponseCode", simple("404"))
					.process(new ValidateErrorProcessor())
	    		.otherwise()
	    			.to("velocity:template/notas/query-notas-promedio-acumulado.vm")
	    			.setHeader("CamelSqlQuery").simple("${body}")
	    			.log("body mesage: ${body}")
	    			.to("direct:bannerSQL")
	    			.choice()
	    				.when(simple("${headers.CamelHttpResponseCode} != 200"))
		    				.setHeader("CamelHttpResponseCode").simple("400")
	    					.process(new ValidateErrorProcessor())
	    				.when(simple("${headers.CamelHttpResponseCode} == 200 && ${body.size()} == 0"))
	    					.removeHeaders("*")
	    					.setHeader("CamelHttpResponseCode").simple("404")
	    					.process(new ValidateErrorProcessor())
	    				.otherwise()
	    					.log("Query response ::::::::: ${body}")
	    					.bean(NotasService.class, "getNotasPromedioAcumulado")
	    			.end()

	    	.end();	
        
        from("direct:obtenerNotasEstudiante")
	        .to("direct:set-authentication")
	        .to("direct:validatePidmData")
	        .process(new ValidateParamPerProcessor())
	        .to("direct:pidmRoute")
	        .choice()
	        	.when(simple("${property.ContinueProcedure} != true"))
					.log(LoggingLevel.ERROR," :::: Error en Consultar SPIDM")
					.setHeader("CamelHttpResponseCode", simple("404"))
					.process(new ValidateErrorProcessor())
				.otherwise()
					.to("velocity:template/notas/query-notas-estudiante.vm")
					.setHeader("CamelSqlQuery").simple("${body}")
					.log("${body}")
					.to("direct:bannerSQL")
					.choice()
						.when(simple("${header.CamelHttpResponseCode} != 200"))
							.process(new ValidateErrorProcessor())
						.otherwise()
						.log("Query response ::::::::: ${body}")
						.bean(NotasService.class, "getNotasEstudiante")
					.end()
	
			.end();
        
        from("direct:obtenerNotasHistorico")
	        .to("direct:set-authentication")
	        .to("direct:validatePidmData")
	        .setProperty("snombrecurso").simple("${headers.snombrecurso}")
	        .setProperty("scodigocurso").simple("${headers.scodigocurso}")
	        .setProperty("scrn").simple("${headers.scrn}")
	        .setProperty("snivel").simple("${headers.snivel}")
	        .setProperty("speriodo").simple("${headers.speriodo}")
	        .to("direct:pidmRoute")
	        .choice()
		        .when(simple("${property.ContinueProcedure} != true"))
					.log(LoggingLevel.ERROR," :::: Error en Consultar SPIDM")
					.setHeader("CamelHttpResponseCode", simple("404"))
					.process(new ValidateErrorProcessor())
				.otherwise()
					.to("velocity:template/notas/query-notas-historico.vm")
					.setHeader("CamelSqlQuery").simple("${body}")
					.log("${body}")
					.to("direct:bannerSQL")
					.choice()
						.when(simple("${header.CamelHttpResponseCode} != 200"))
							.process(new ValidateErrorProcessor())
						.otherwise()
						.log("Query response ::::::::: ${body}")
						.bean(NotasService.class, "getNotasHistorico")
					.end()
	        .end();
        
        from("direct:obtenerNotasPromedioSeccion")
        	.to("direct:set-authentication")
        	.process(new ValidateParamPerProcessor())
        	.process(new ValidateParamCRNProcessor())
        	.setProperty("snivel").simple("${headers.snivel}")
			.to("velocity:template/notas/query-notas-promedio-seccion.vm")
			.setHeader("CamelSqlQuery").simple("${body}")
			.log("${body}")
			.to("direct:bannerSQL")
			.choice()
				.when(body().isNotNull())
					.setHeader("CamelHttpResponseCode").simple("{{http.code.ok}}")
					.log("salida ok")
				.otherwise()
					.setHeader("CamelHttpResponseCode").simple("{{http.code.not.found}}")
					.log("salida fail")
			.end()
			.choice()
				.when(simple("${header.CamelHttpResponseCode} != 200"))
					.process(new ValidateErrorProcessor())
				.otherwise()
					.log("Query response ::::::::: ${body}")
					.bean(NotasService.class, "getPromedioSeccion")
			.end();
        
        from("direct:obtenerPromedioSemestre")
	        .to("direct:set-authentication")
	        .to("direct:validatePidmData")
	        .process(new ValidateParamPerNivProcessor())
	        .setProperty("scodigo").simple("${headers.scodigo}")
	        .to("direct:pidmRoute")
	        .log("verificando headers antes de eliminarlos: ${headers}")
	        .removeHeaders("*")
	        .choice()
		        .when(simple("${property.ContinueProcedure} != true"))
					.log(LoggingLevel.ERROR," :::: Error en Consultar SPIDM")
					.setHeader("CamelHttpResponseCode", simple("404"))
					.process(new ValidateErrorProcessor())
				.otherwise()
					.to("velocity:template/notas/query-notas-promedio-semestre.vm")
					.setHeader("CamelSqlQuery").simple("${body}")
					.to("direct:bannerSQL")
					.choice()
						.when(body().isNotNull())
							.setHeader("CamelHttpResponseCode").simple("{{http.code.ok}}")
							.log("salida ok")
						.otherwise()
							.setHeader("CamelHttpResponseCode").simple("{{http.code.not.found}}")
							.log("salida fail")
					.end()
					.choice()
						.when(simple("${header.CamelHttpResponseCode} != 200"))
							.process(new ValidateErrorProcessor())
						.otherwise()
							.log("verificando headers antes de processar informacion: ${headers}")
							.bean(NotasService.class, "getPromedioSemestre")
					.end()
		    .end();
        
        from("direct:obtenerCalificadoMaxMin")
	        .to("direct:set-authentication")
	        .to("direct:validatePidmData")
	        .process(new ValidateParamNivProcessor())
	        .to("direct:pidmRoute")
	        .removeHeaders("*")
	        .choice()
	        	.when(simple("${property.ContinueProcedure} != true"))
		        	.log(LoggingLevel.ERROR," :::: Error en Consultar SPIDM")
		        	.setHeader("CamelHttpResponseCode", simple("404"))
					.process(new ValidateErrorProcessor())
				.otherwise()
					.to("direct:MaximoPeriodo")
					.to("direct:MinimoPeriodo")
					.end()
					.choice()
						.when(simple("${header.CamelHttpResponseCode} != 200"))
							.log(LoggingLevel.ERROR," :::: Error -- Periodos ")
							.setHeader("CamelHttpResponseCode", simple("404"))
							.process(new ValidateErrorProcessor())
						.otherwise()
							.bean(NotasService.class, "getCalificadoMaxMin")
					.end()
			.end()
        ;
        
        from("direct:MaximoPeriodo")
        	.to("velocity:template/notas/query-maximo-semestre.vm")
        	.setHeader("CamelSqlQuery").simple("${body}")
			.to("direct:bannerSQL")
			.choice()
				.when(body().isNotNull())
					.setHeader("CamelHttpResponseCode").simple("{{http.code.ok}}")
					.log("salida ok")
				.otherwise()
					.setHeader("CamelHttpResponseCode").simple("{{http.code.not.found}}")
					.log("salida fail")
			.end()
			.choice()
				.when(simple("${header.CamelHttpResponseCode} != 200"))
					.process(new ValidateErrorProcessor())
				.otherwise()
					.setProperty("maxPeriod").simple("${body}")
					.log("verificando property de maximo periodo---> : ${property.maxPeriod}")
			.end();
        
        
        from("direct:MinimoPeriodo")
	    	.to("velocity:template/notas/query-minimo-semestre.vm")
	    	.setHeader("CamelSqlQuery").simple("${body}")
			.to("direct:bannerSQL")
			.choice()
				.when(body().isNotNull())
					.setHeader("CamelHttpResponseCode").simple("{{http.code.ok}}")
					.log("salida ok")
				.otherwise()
					.setHeader("CamelHttpResponseCode").simple("{{http.code.not.found}}")
					.log("salida fail")
			.end()
			.choice()
				.when(simple("${header.CamelHttpResponseCode} != 200"))
					.process(new ValidateErrorProcessor())
				.otherwise()
					.setProperty("minPeriod").simple("${body}")
					.log("verificando property de minimo periodo---> : ${property.minPeriod}")
			.end();
        
        
        from("direct:obtenerNotasSicua")
	        .to("direct:set-authentication")
	        .process(new ValidateParamCodCurProcessor())
	        .removeHeaders("*")
			.to("direct:token-sicua")
			.log("veriicando BODY y HEADERS en ruta raiz salida de token sicua: ${body} y ${headers}")
			.to("direct:cursosicua")
			.log("veriicando BODY y HEADERS en ruta raiz salida de curso sicua: ${body} y ${headers}")
			.setProperty("notaStatus").jsonpath("$.status", true, String.class)
			.log("verificando notaStatus: ${property.notaStatus}")
			.choice()
				.when(simple("${property.notaStatus} != 404"))
					.to("direct:descripcionsicua")
					.log("verificando body de descripciones sicua:::: ${property.bodyDescripciones}")
					.bean(NotasService.class, "getNotasSicua")
				.otherwise()
					.process(new ValidateErrorProcessor())
			.end()
        ;
        
        //------------------------- child routes for NotasSicua
        from("direct:cursosicua")
        	.removeHeaders("*")
        	.setHeader("Authorization").simple("{{Bearer}} ${property.accessToken}")
        	.setHeader("CamelHttpMethod").simple("GET")
        	.setProperty("endpoint").simple("{{sicua.endpoint.obtener.curso.curso}}${property.codigo_curso}{{sicua.endpoint.obtener.curso.estudiante}}${property.login_estudiante}")
        	.setHeader("CamelHttpUri").simple("${property.endpoint}")
        	//.log("Consumiendo cursos de notas para el curso ${property.curso}.... header Authorization: ${headers}")
        	.setBody(simple(""))
        	.to("http4://dummyHttp?throwExceptionOnFailure=false")
        	.convertBodyTo(String.class)
        	.setProperty("bodyNotas").simple("${body}")
        ;
        
        from("direct:descripcionsicua")
        	.removeHeaders("*")
        	.setHeader("Authorization").simple("{{Bearer}} ${property.accessToken}")
        	.setHeader("CamelHttpMethod").constant("GET")
        	.setHeader("CamelHttpUri").simple("{{sicua.endpoint.obtener.curso.curso}}${property.codigo_curso}{{sicua.endpoint.obtener.descripcion}}")
        	//.log("Consumiendo cursos de notas para el curso ${property.curso}.... header Authorization: ${headers}")
        	.setBody(simple(""))
        	.to("http4://dummyHttp?throwExceptionOnFailure=false")
        	.convertBodyTo(String.class)
        	.setProperty("bodyDescripciones").simple("${body}")
        ;
      //------------------------  // child routes for NotasSicua

        
	}
}
