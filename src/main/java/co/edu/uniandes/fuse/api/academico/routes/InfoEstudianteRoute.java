package co.edu.uniandes.fuse.api.academico.routes;

import java.sql.SQLException;
import java.util.ArrayList;

import org.apache.camel.LoggingLevel;
import org.apache.camel.model.dataformat.JsonLibrary;
import org.apache.camel.model.rest.RestParamType;

import co.edu.uniandes.fuse.api.academico.beans.estudiante.EstudianteService;
import co.edu.uniandes.fuse.api.academico.beans.estudiante.ValidateParamsEstudianteService;
import co.edu.uniandes.fuse.api.academico.models.datosEstudiante.InformacionAcudiente;
import co.edu.uniandes.fuse.api.academico.models.datosEstudiante.InformacionEstadoAcademico;
import co.edu.uniandes.fuse.api.academico.models.datosEstudiante.InformacionInstitucion;
import co.edu.uniandes.fuse.api.academico.models.datosEstudiante.InformacionPersonalEstudiante;
import co.edu.uniandes.fuse.api.academico.models.datosEstudiante.InformacionResEconomico;
import co.edu.uniandes.fuse.api.academico.models.datosEstudiante.InformacionSobrepaso;
import co.edu.uniandes.fuse.api.academico.models.datosEstudiante.RespuestaInformacionPersonal;
import co.edu.uniandes.fuse.api.academico.models.datosEstudiante.SalidaRetenciones;
import co.edu.uniandes.fuse.api.academico.models.datosEstudiante.informacionPersonalOpciones;
import co.edu.uniandes.fuse.api.academico.models.estudiante.ParametroPregunta;
import co.edu.uniandes.fuse.api.academico.processors.ValidateErrorProcessor;
import co.edu.uniandes.fuse.api.academico.processors.ValidateInfoStudentProcessor;
import co.edu.uniandes.fuse.api.academico.processors.ValidateParamsPhdProcessor;
import co.edu.uniandes.fuse.api.academico.processors.ValidateParamsProcessor;
import co.edu.uniandes.fuse.api.academico.processors.ValidatePreguntaProcessor;
import co.edu.uniandes.fuse.api.academico.processors.datosEstudiante.InformacionAcudienteProcessor;
import co.edu.uniandes.fuse.api.academico.processors.datosEstudiante.InformacionDoctoralProcessor;
import co.edu.uniandes.fuse.api.academico.processors.datosEstudiante.InformacionEstadoAcademicoProcessor;
import co.edu.uniandes.fuse.api.academico.processors.datosEstudiante.InformacionInstitucionProcessor;
import co.edu.uniandes.fuse.api.academico.processors.datosEstudiante.InformacionPersonalEstudianteProcessor;
import co.edu.uniandes.fuse.api.academico.processors.datosEstudiante.InformacionPersonalOpcionesProcessor;
import co.edu.uniandes.fuse.api.academico.processors.datosEstudiante.InformacionPersonalProcessor;
import co.edu.uniandes.fuse.api.academico.processors.datosEstudiante.InformacionPersonalRetencionesProcessor;
import co.edu.uniandes.fuse.api.academico.processors.datosEstudiante.InformacionResEcoProcessor;
import co.edu.uniandes.fuse.api.academico.processors.datosEstudiante.InformacionSobrepasoProcessor;
import co.edu.uniandes.fuse.api.academico.processors.datosEstudiante.PreguntaParametroProcessor;
import co.edu.uniandes.fuse.api.academico.processors.datosEstudiante.StartLimitProcessor;
import co.edu.uniandes.fuse.core.utils.models.ErrorResponse;

public class InfoEstudianteRoute  extends RestConfiguration{
	
	public void configure() throws Exception {
		
		// EXCEPTIONS      
        onException(SQLException.class)
        .handled(true)
        .to("direct-vm:manageException");
		
        onException(Exception.class)
             .handled(true)
             .to("direct-vm:manageException");
        ;
		
        
     // REST & SWAGGER COMPONENTS	
     	rest("/estudiantes").description("Consulta de informaci&oacute;n de estudiantes")
     		
	     	.get("/informacionPersonal")
	    		.description("Consulta informaci&oacute;n personal del estudiante a trav&eacute;s de una pregunta parametrica.")
	    		.consumes("application/json").produces("application/json")
		        	.param()
						.name("scodigo").description("C&oacute;digo academico del estudiante. <br> Ejemplo: 201217726")
						.type(RestParamType.query)
						.required(false)
					.endParam()
					.param()
						.name("slogin").description("Login acad&eacute;mico del estudiante sin @uniandes.edu.co. <br> Ejemplo:  s.baez879")
						.type(RestParamType.query)
						.required(false)
					.endParam()	
					.param()
						.name("snumerodocumento").description("Documento de Identificaci&oacute;n del estudiante. <br> Ejemplo: 1019095827")
						.type(RestParamType.query)
						.required(true)
					.endParam()
					.param()
						.name("spregunta").description("Pregunta param&eacute;trica a consultar. <br> Ejemplo:  Nivel Educativo Madre")
						.type(RestParamType.query)
						.required(true)
					.endParam()
				.outType(RespuestaInformacionPersonal.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:informacionPersonalRoute")
				
		     .get("/informacionPersonal/parametro")
		    		.description("Consulta el parametro de pregunta para obtener informaci&oacute;n del estudiante con la pregunta parametrica.")
		    		.consumes("application/json").produces("application/json")
			        	.param()
							.name("answerout").description("Respuesta. <br> Ejemplo: SWTTVIV_DESC")
							.type(RestParamType.query)
							.required(true)
						.endParam()
						.param()
							.name("questtype").description("Tipo de pregunta. <br> Ejemplo: P &oacute; S")
							.type(RestParamType.query)
							.required(true)
						.endParam()	
						.param()
							.name("tablename").description("Nombre de la tabla. <br> Ejemplo: SWTTVIV")
							.type(RestParamType.query)
							.required(true)
						.endParam()
						.param()
							.name("codein").description("C&oacute;digo. <br> Ejemplo:  SWTTVIV_CODE")
							.type(RestParamType.query)
							.required(true)
						.endParam()
					.outType(ParametroPregunta[].class)
					.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
					.to("direct:informacionPersonalParametroRoute")
				
			.get("/informacionPersonal/registros")
				.description("Consulta informaci&oacute;n personal del estudiante (registros)")
	    		.consumes("application/json").produces("application/json")
					.param()
						.name("slogin").description("Login acad&eacute;mico del estudiante sin @uniandes.edu.co. <br> Ejemplo: cafanador")
						.type(RestParamType.query)
						.required(false)
					.endParam()	
		        	.param()
						.name("scodigo").description("C&oacute;digo academico del estudiante. <br> Ejemplo: 201021881")
						.type(RestParamType.query)
						.required(false)
					.endParam()
					.param()
						.name("snumerodocumento").description("Documento de Identificaci&oacute;n del estudiante. <br> Ejemplo: 80843479")
						.type(RestParamType.query)
						.required(false)
					.endParam()
					.param()
						.name("speriodo").description("Periodo acad&eacute;mico. <br> Ejemplo: 201410")
						.type(RestParamType.query)
						.required(true)
					.endParam()
				.outType(InformacionPersonalEstudiante.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:informacionPersonalEStudiante")
			
			.get("/informacionPersonal/acudiente")
				.description("consulta y retorna la informacin del acudiente (actualizado) de un estudiante.")
	    		.consumes("application/json").produces("application/json")
		    		.param()
						.name("slogin").description("Login acad&eacute;mico del estudiante sin @uniandes.edu.co. <br> Ejemplo: ma.duran13")
						.type(RestParamType.query)
						.required(false)
					.endParam()	
		        	.param()
						.name("scodigo").description("C&oacute;digo academico del estudiante. <br> Ejemplo: 201413898")
						.type(RestParamType.query)
						.required(false)
					.endParam()
					.param()
						.name("snumerodocumento").description("Documento de Identificaci&oacute;n del estudiante. <br> Ejemplo: 1055315249")
						.type(RestParamType.query)
						.required(false)
					.endParam()
				.outType(InformacionAcudiente.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:informacionAcudienteRoute")
				
			.get("/informacionPersonal/responsableEconomico")
				.description("consulta y retorna la informacion del responsable economico.")
	    		.consumes("application/json").produces("application/json")
		    		.param()
						.name("slogin").description("Login academico del estudiante sin @uniandes.edu.co . <br> Ejemplo: ma.duran13")
						.type(RestParamType.query)
						.required(false)
					.endParam()	
		        	.param()
						.name("scodigo").description("Codigo academico del estudiante. <br> Ejemplo: 201413898")
						.type(RestParamType.query)
						.required(false)
					.endParam()
					.param()
						.name("snumerodocumento").description("Documento de Identificacion del estudiante. <br> Ejemplo: 1055315249")
						.type(RestParamType.query)
						.required(false)
					.endParam()
				.outType(InformacionResEconomico.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:informacionResEconomicoRoute")
				
			.get("/informacionPersonal/institucionEducativa")
				.description("consulta y retorna la informaci&oacute;n de las instituciones educativas a las que ha pertenecido o pertenece un estudiante")
	    		.consumes("application/json").produces("application/json")
		    		.param()
						.name("slogin").description("Login academico del estudiante del estudiante. <br> Ejemplo: s.baez879")
						.type(RestParamType.query)
						.required(false)
					.endParam()	
		        	.param()
						.name("scodigo").description("Codigo academico del estudiante. <br> Ejemplo: 201217726")
						.type(RestParamType.query)
						.required(false)
					.endParam()
					.param()
						.name("snumerodocumento").description("Documento de Identificacion del estudiante. <br> Ejemplo: 1019095827")
						.type(RestParamType.query)
						.required(false)
					.endParam()
				.outType(InformacionInstitucion.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:informacionInstitucionRoute")
				
			.get("/informacionPersonal/opciones")
				.description("consulta y retorna las opciones que est&aacute; cursando un estudiante en un periodo espec&iacute;fico")
	    		.consumes("application/json").produces("application/json")
		    		.param()
						.name("slogin").description("Login acad&eacute;mico del estudiante del estudiante. <br> Ejemplo: s.vernaza10")
						.type(RestParamType.query)
						.required(false)
					.endParam()	
		        	.param()
						.name("scodigo").description("C&oacute;digo academico del estudiante. <br> Ejemplo: 201327910")
						.type(RestParamType.query)
						.required(false)
					.endParam()
					.param()
						.name("snumerodocumento").description("Documento de Identificaci&oacute;n del estudiante. <br> Ejemplo: 1020803108")
						.type(RestParamType.query)
						.required(false)
					.endParam()
					.param()
						.name("speriodo").description("Periodo acad&eacute;mico.  <br> Ejemplo: 201610")
						.type(RestParamType.query)
						.required(true)
					.endParam()
				.outType(informacionPersonalOpciones.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:informacionPersonalOpcionesRoute")
				
			.get("/informacionPersonal/sobrepasos")
				.description("consulta y retorna si un estudiante tiene un sobrepaso acad&eacute;mico y el tipo de sobrepaso, en un periodo espec&iacute;fico.")
	    		.consumes("application/json").produces("application/json")
		    		.param()
						.name("slogin").description("Login acad&eacute;mico del estudiante del estudiante. <br> Ejemplo: s.baez879")
						.type(RestParamType.query)
						.required(false)
					.endParam()	
		        	.param()
						.name("scodigo").description("C&oacute;digo academico del estudiante. <br> Ejemplo: 201217726")
						.type(RestParamType.query)
						.required(false)
					.endParam()
					.param()
						.name("snumerodocumento").description("Documento de Identificaci&oacute;n del estudiante. <br> Ejemplo: 1019095827")
						.type(RestParamType.query)
						.required(false)
					.endParam()
					.param()
						.name("speriodo").description("Periodo acad&eacute;mico. <br> Ejemplo: 201610")
						.type(RestParamType.query)
						.required(true)
					.endParam()
				.outType(InformacionSobrepaso.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:informacionSobrepasoRoute")
				
			.get("/informacionPersonal/estado")
				.description("Consulta y retorna la informaci&oacute;n del estado acad&eacute;mico de un estudiante, en un periodo espec&iacute;fico.")
				.consumes("application/json").produces("application/json")
		    		.param()
						.name("slogin").description("Login acad&eacute;mico del estudiante del estudiante. <br> Ejemplo: s.baez879")
						.type(RestParamType.query)
						.required(false)
					.endParam()	
		        	.param()
						.name("scodigo").description("C&oacute;digo academico del estudiante. <br> Ejemplo: 201217726")
						.type(RestParamType.query)
						.required(false)
					.endParam()
					.param()
						.name("snumerodocumento").description("Documento de Identificaci&oacute;n del estudiante. <br> Ejemplo: 1019095827")
						.type(RestParamType.query)
						.required(false)
					.endParam()
					.param()
						.name("speriodo").description("Periodo acad&eacute;mico. <br> Ejemplo: 201210")
						.type(RestParamType.query)
						.required(true)
					.endParam()
				.outType(InformacionEstadoAcademico.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:informacionEstadoAcademicoRoute")
				
			.get("/informacionPersonal/retenciones")
				.description("consulta y retorna la informaci&oacute;n de las retenciones de un estudiante.")
				.consumes("application/json").produces("application/json")
		    		.param()
						.name("slogin").description("Login acad&eacute;mico del estudiante del estudiante. <br> Ejemplo: s.baez879")
						.type(RestParamType.query)
						.required(false)
					.endParam()	
		        	.param()
						.name("scodigo").description("C&oacute;digo academico del estudiante. <br> Ejemplo: 201318319")
						.type(RestParamType.query)
						.required(false)
					.endParam()
					.param()
						.name("snumerodocumento").description("Documento de Identificaci&oacute;n del estudiante.<br> Ejemplo: 1019095827 ")
						.type(RestParamType.query)
						.required(false)
					.endParam()
					.param()
						.name("scodigoRetencion").description("C&oacute;digo de retenci&oacute;n. <br> Ejemplo: 20")
						.type(RestParamType.query)
						.required(false)
					.endParam()
					.param()
						.name("dfechainicio").description("Fecha de Inicio. <br> Ejemplo: 15/01/2015")
						.type(RestParamType.query)
						.required(false)
					.endParam()
					.param()
						.name("dfechafin").description("Fecha Fin. <br> Ejemplo: 13/01/2018")
						.type(RestParamType.query)
						.required(false)
					.endParam()
				.outType(SalidaRetenciones.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:informacionPersonalRetencionesRoute")
				
			.get("/informacionDoctoral")
				.description("consulta y retorna la informaci&oacute;n de los estudiantes phD.")
				.consumes("application/json").produces("application/json")
		    		.param()
						.name("start").description("Inicio de rango de busqueda de informaci&oacute;n doctoral.")
						.type(RestParamType.query)
						.required(false)
					.endParam()	
		        	.param()
						.name("limit").description("Limite de rango de busqueda de informaci&oacute;n doctoral.")
						.type(RestParamType.query)
						.required(false)
					.endParam()
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:obtenerStartLimit")
			
			.get("/informacionDoctoral/status") //rectificar si es posible la peticion por status en el endpoint utilizando
				.description("consulta y retorna el status de un estudiante phD.")
				.consumes("application/json").produces("application/json")
				.param()
					.name("start").description("Inicio de rango de busqueda de informaci&oacute;n doctoral.")
					.type(RestParamType.query)
					.required(false)
				.endParam()	
				.param()
					.name("limit").description("Limite de rango de busqueda de informaci&oacute;n doctoral.")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("status").description("Status del estudiante")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:obtenerPhdStatusStudent")
			
			.get("/informacionDoctoral/rangeStatus") //rectificar si es posible la peticion por rango de status en el endpoint utilizando
				.description("consulta y retorna la informaci&oacute;n de un estudiante phD dentro de un rango establecido.")
				.consumes("application/json").produces("application/json")
				.param()
					.name("start").description("Inicio de rango de busqueda de informaci&oacute;n doctoral.")
					.type(RestParamType.query)
					.required(false)
				.endParam()	
				.param()
					.name("limit").description("Limite de rango de busqueda de informaci&oacute;n doctoral.")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("status").description("Status Inicial del estudiante.")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("status2").description("Status Final del estudiante.")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:obtenerPhdRangoStudent")
			
			.get("/informacionDoctoral/codeStudent")
				.description("consulta y retorna la informaci&oacute;n de un estudiante phD por el codigo del estudiante.")
				.consumes("application/json").produces("application/json")
				.param()
					.name("start").description("Inicio de rango de busqueda de informaci&oacute;n doctoral.")
					.type(RestParamType.query)
					.required(false)
				.endParam()	
				.param()
					.name("limit").description("Limite de rango de busqueda de informaci&oacute;n doctoral.")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("codeStudent").description("C&oacute;digo academico del estudiante.")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:obtenerPhdCodigoStudent")
			
			.get("/informacionDoctoral/username")
				.description("consulta y retorna la informaci&oacute;n de un estudiante phD por el login/username del estudiante.")
				.consumes("application/json").produces("application/json")
				.param()
					.name("start").description("Inicio de rango de busqueda de informaci&oacute;n doctoral.")
					.type(RestParamType.query)
					.required(false)
				.endParam()	
				.param()
					.name("limit").description("Limite de rango de busqueda de informaci&oacute;n doctoral.")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("username").description("Login del estudiante.")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:obtenerPhdNameStudent")
			
			.get("/informacionDoctoral/userAndCode")
				.description("consulta y retorna la informaci&oacute;n de las retenciones de un estudiante por el login/username y el c&oacute;digo del estudiante.")
				.consumes("application/json").produces("application/json")
				.param()
					.name("start").description("Inicio de rango de busqueda de informaci&oacute;n doctoral.")
					.type(RestParamType.query)
					.required(false)
				.endParam()	
				.param()
					.name("limit").description("Limite de rango de busqueda de informaci&oacute;n doctoral.")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.param()
					.name("username").description("Login del estudiante.")
					.type(RestParamType.query)
					.required(false)
				.endParam()
	        	.param()
					.name("codeStudent").description("C&oacute;digo academico del estudiante.")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:obtenerPhdUserNameCodeStudent")
			
			.get("/informacionDoctoral/faculty") //rectificar si es posible la peticion por facultad en el endpoint utilizando
				.description("consulta y retorna la informaci&oacute;n de las retenciones de un estudiante por facultad.")
				.consumes("application/json").produces("application/json")
				.param()
					.name("start").description("Inicio de rango de busqueda de informaci&oacute;n doctoral.")
					.type(RestParamType.query)
					.required(false)
				.endParam()	
				.param()
					.name("limit").description("Limite de rango de busqueda de informaci&oacute;n doctoral.")
					.type(RestParamType.query)
					.required(false)
				.endParam()
	        	.param()
					.name("faculty").description("Facultad del estudiante.")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:obtenerPhdFacultyStudent")
				
			.get("/informacionDoctoral/program") //rectificar si es posible la peticion por programa en el endpoint utilizando
				.description("consulta Banner y retorna la informaci&oacute;n de las retenciones de un estudiante.")
				.consumes("application/json").produces("application/json")
				.param()
					.name("start").description("Inicio de rango de busqueda de informaci&oacute;n doctoral.")
					.type(RestParamType.query)
					.required(false)
				.endParam()	
				.param()
					.name("limit").description("Limite de rango de busqueda de informaci&oacute;n doctoral.")
					.type(RestParamType.query)
					.required(false)
				.endParam()
	        	.param()
					.name("programId").description("Programa del estudiante.")
					.type(RestParamType.query)
					.required(false)
				.endParam()
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:obtenerPhdProgramStudent")
	     		
     		;
     	
		// REST & SWAGGER COMPONENTS				
		// ROUTE INFORMACION PERSONAL ESTUDIANTES PRE Y POS - GRADO	
     	
     	
     	from("direct:informacionPersonalRoute")
	        .to("direct:set-authentication")
	        .process(new ValidatePreguntaProcessor())
	        .to("direct:pidmRoute")
	        .log("headers: ${headers}")
	        .setProperty("SNumeroDocumento").simple("${header.snumeroDocumento}")
	        .setProperty("SPidm").jsonpath("$.Estudiante.sPidm", true, String.class)
	    	.choice()
	    		.when(simple("${property.ContinueProcedure} != true"))
	    			.log(LoggingLevel.ERROR,"::::: Error en Consultar SPIDM")
	    			.setHeader("CamelHttpResponseCode", simple("404"))
					.process(new ValidateErrorProcessor())
	            .otherwise()
	            	.to("velocity:template/estudiantes/query-preguntas.vm")
	            	.setHeader("CamelSqlQuery").simple("${body}")
	            	.log("header sql: ${headers}")
	            	.to("direct:bannerSQL")
	            	.log("body sql: ${body}")
	            	.choice()
	            		.when(simple("${header.CamelHttpResponseCode} != 200"))
	            			.process(new ValidateErrorProcessor())
	            		.otherwise()
	            			.setProperty("queryResponse").simple("${body.get(0).get('SARQUAN_ANSWER')}")
	            			.log("property queryResponse: ${property.queryResponse}")
	            			.to("direct:informacionPersonalPreguntaParametro")
	            			.log("body persona pregunta: ${body}")
	            			.setProperty("preguntaParametro").simple("${body}")
	            			.choice()
	            				.when(simple("${header.CamelHttpResponseCode} != 200"))
	            					.process(new ValidateErrorProcessor())
	            				.otherwise()
	            					.setProperty("isPregunta").simple("${property.SquestionType}")
	            					.log("value for pregunta parametrica: ${property.isPregunta}")
	            					.choice()
	            						.when(simple("${property.isPregunta} != true"))
		            						.setHeader("CamelHttpResponseCode", simple("404"))
		            						.setHeader("CamelHttpResponseText").simple("{{excepcion.validacion.entrada}}")
		            						.process(new ValidateErrorProcessor())
		            		            .otherwise()
	            							.setProperty("Answer").simple("${property.SanswerOut}")
	            							.setProperty("Table").simple("${property.StableName}")
	            							.setProperty("Code").simple("${property.ScodeIn}")
	            							.to("direct:informacionPersonalPregunta")
	            							.removeHeader("*")
	            							.log("headers:::: ${headers}")
	            							.process(new InformacionPersonalProcessor())
	            					.end()
	            			.end()
	            	.end()
	    ;
     	
     	from("direct:informacionPersonalParametroRoute")
     		.bean(ValidateParamsEstudianteService.class,"validateParamsQuest")
     		.to("velocity:template/estudiantes/query-parametro.vm")
			.setHeader("CamelSqlQuery").simple("${body}")
			.to("direct:prescoringSQL")
			.log("verificando body sql: ${body}")
			.bean(EstudianteService.class,"getInfoPersonalParameter")
     	;
     	
     	
     	 from("direct:informacionPersonalEStudiante")
	        .to("direct:set-authentication")
	        .process(new ValidateInfoStudentProcessor())
	        .setProperty("Speriodo").simple("${headers.speriodo}")
	        .to("direct:pidmRoute")
	        .log("verificando periodo: ${property.Speriodo}")
	        .log("verificando el pidm: ${property.spidm}")
	        .choice()
	        	.when(simple("${property.ContinueProcedure} != true"))
		        	.log(LoggingLevel.ERROR,"::::: Error en Consultar SPIDM")
		        	.setHeader("CamelHttpResponseCode").constant("404")
	                .process(new ValidateErrorProcessor())
	            .otherwise()
	            	.to("direct-vm:nombrePersona")
	            	.log("verificando property nombres de la persona--> ${property.namesPerson}")
	            	.to("velocity:template/estudiantes/query-obtener-informacion-personal-estudiante.vm")
	            	.setHeader("CamelSqlQuery").simple("${body}")
	            	.log("header sql: ${headers}")
	            	.to("direct:bannerSQL")
	            	.log("body sql: ${body}")
	            	.choice()
	            		.when(simple("${header.CamelHttpResponseCode} != 200"))
	            			.process(new ValidateErrorProcessor())
	            		.otherwise()
	            			.process(new InformacionPersonalEstudianteProcessor())
	            			.log("verificando body final: ${body}")
	            	.end()
	        .end()
	     ;
     	 
     	 
        //ruta informacion ACUDIENTE
        from("direct:informacionAcudienteRoute")
	        .to("direct:set-authentication")
	        .process(new ValidateParamsProcessor())
	        .to("direct:pidmRoute")
	        .log("verificando body de pidm: ${body}")
	        .choice()
	        	.when(simple("${property.ContinueProcedure} != true"))
        			.log(LoggingLevel.ERROR,"::::: Error en Consultar SPIDM")
	                .setHeader("CamelHttpResponseCode").constant("404")
	                .process(new ValidateErrorProcessor())
	            .otherwise()
	            	.to("direct:ConsultaInfoEstudiante")
		            .to("velocity:template/estudiantes/query-acudiente.vm")
		            	.setHeader("CamelSqlQuery").simple("${body}")
		            	.log("header sql: ${headers}")
		            	.to("direct:bannerSQL")
		            	.log("body sql: ${body}")
	            	.choice()
		         		.when(simple("${body} == null"))
		         			.process(new ValidateErrorProcessor())
		         		.otherwise()
		         			.process(new InformacionAcudienteProcessor())
		         			.log("verificando body final: ${body}")
		         	.end()
         	.end()
	            	
        ;
        
        from("direct:informacionResEconomicoRoute")
	        .to("direct:set-authentication")
	        .process(new ValidateParamsProcessor())
	        .to("direct:pidmRoute")
	        .log("verificando body de pidm: ${body}")
	        .choice()
	        	.when(simple("${property.ContinueProcedure} != true"))
	    			.log(LoggingLevel.ERROR,"::::: Error en Consultar SPIDM")
	                .setHeader("CamelHttpResponseCode").constant("404")
	                .process(new ValidateErrorProcessor())
	            .otherwise()
	            	.to("direct:ConsultaInfoEstudiante")
	            	.to("direct:ConsultaResponsable")
	            	.log("verificando correo property: ${property.correoRE}")
	            	.log("verificando correoOpt property: ${property.correoOpt}")
	            	.setBody(simple(""))
		            .to("velocity:template/estudiantes/query-acudiente.vm")
		            	.setHeader("CamelSqlQuery").simple("${body}")
		            	.log("header sql: ${headers}")
		            	.to("direct:bannerSQL")
		            	.log("body sql resEcono: ${body}")
	            	/*.choice()
		         		.when(simple("${body} == null || ${body.size()} == 0"))
		         			.setHeader("CamelHttpResponseCode").simple("404")
		         			.process(new ValidateErrorProcessor())
		         		.otherwise()
			         		
		         			.process(new InformacionResEcoProcessor())
		         			.log("verificando body final: ${body}")
		         	.end()*/
		            	.process(new InformacionResEcoProcessor())
	         			.log("verificando body final: ${body}")
	     	.end()
        ;
        
			        from("direct:ConsultaInfoEstudiante")
				        .setProperty("PIDM").simple("${property.spidm}")
				    	
				    	.to("direct-vm:getIdentificaciones") 
				    		.log("verificando body: ${body}")
				    		.log("verificando headers: ${headers}")
				    		.marshal().json(JsonLibrary.Jackson)
				        	.setProperty("identificaciones").simple("${body}")
				        	//.removeHeaders("CamelHttp*")
				        	.log("Verificando identificaciones: ${property.identificaciones}")
				    	
				        .to("direct-vm:getDocumentos")
					        .log("verificando body: ${body}")
				    		.log("verificando headers: ${headers}")
				    		.marshal().json(JsonLibrary.Jackson)
				        	.setProperty("documentos").simple("${body}")
				        	//.removeHeaders("CamelHttp*")
				        	.log("Verificando documentos: ${property.documentos}")
				    	
				        .to("direct-vm:getDatos") 
					        .log("verificando body: ${body}")
				    		.log("verificando headers: ${headers}")
				    		.marshal().json(JsonLibrary.Jackson)
				        	.setProperty("datos").simple("${body}")
				        	//.removeHeaders("CamelHttp*")
				        	.log("Verificando datos: ${property.datos}")
			        
			        ;
			        
			        from("direct:ConsultaResponsable")
				        .to("velocity:template/estudiantes/query-acudiente-correo.vm")
		            	.setHeader("CamelSqlQuery").simple("${body}")
		            	.log("header sql: ${headers}")
		            	.to("direct:bannerSQL")
		            	.log("body sql correoResEcono: ${body}")
		            	.setProperty("correoRE").simple("${body}")
		            	
		            	.to("velocity:template/estudiantes/query-acudiente-correo-opt.vm")
		            	.setHeader("CamelSqlQuery").simple("${body}")
		            	.log("header sql: ${headers}")
		            	.to("direct:bannerSQL")
		            	.log("body sql correoResEcono: ${body}")
		            	.setProperty("correoOpt").simple("${body}")
			        ;
        
        
        // ruta informacion institucion
        from("direct:informacionInstitucionRoute")
	        .to("direct:set-authentication")
	        .process(new ValidateParamsProcessor())
	        .to("direct:pidmRoute")
	        .choice()
	        	.when(simple("${property.ContinueProcedure} != true"))
		        	.log(LoggingLevel.ERROR,"::::: Error en Consultar SPIDM")
		        	.setHeader("CamelHttpResponseCode").constant("404")
	                .process(new ValidateErrorProcessor())
		        .otherwise()
			        .to("velocity:template/estudiantes/query-institucion.vm")
		        	.setHeader("CamelSqlQuery").simple("${body}")
		        	.log("header sql: ${headers}")
		        	.to("direct:bannerSQL")
		        	.log("body sql: ${body}")
		        	.choice()
		         		.when(simple("${header.CamelHttpResponseCode} != 200"))
		         			.process(new ValidateErrorProcessor())
		         		.otherwise()
		         			.process(new InformacionInstitucionProcessor())
		         			.log("verificando body final: ${body}")
		         	.end()
	        .end()
        ;
     	 
     	 
        
      //ruta de informacion Personal Opciones
        from("direct:informacionPersonalOpcionesRoute")
	        .to("direct:set-authentication")
	        .process(new ValidateInfoStudentProcessor())
	        .setProperty("Speriodo").simple("${headers.speriodo}")
	        .to("direct:pidmRoute")
	        .choice()
	        	.when(simple("${property.ContinueProcedure} != true"))
		        	.log(LoggingLevel.ERROR,"::::: Error en Consultar SPIDM")
		        	.setHeader("CamelHttpResponseCode").constant("404")
	                .process(new ValidateErrorProcessor())
	             .otherwise()
		             .to("velocity:template/estudiantes/query-opciones-estudiante.vm")
		            	.setHeader("CamelSqlQuery").simple("${body}")
		            	.log("header sql: ${headers}")
		            	.to("direct:bannerSQL")
		            	.log("body sql: ${body}")
		            	.choice()
			         		.when(simple("${header.CamelHttpResponseCode} != 200"))
			         			.process(new ValidateErrorProcessor())
			         		.otherwise()
			         			.process(new InformacionPersonalOpcionesProcessor())
			         			.log("verificando body final: ${body}")
			         	.end()
	         .end()
        ;
        
        
        //ruta de informacion sobrepaso academico 
        from("direct:informacionSobrepasoRoute")
	        .to("direct:set-authentication")
	        .process(new ValidateInfoStudentProcessor())
	        .setProperty("Speriodo").simple("${headers.speriodo}")
	        .to("direct:pidmRoute")
	        .choice()
	        	.when(simple("${property.ContinueProcedure} != true"))
		        	.log(LoggingLevel.ERROR,"::::: Error en Consultar SPIDM")
		        	.setHeader("CamelHttpResponseCode").constant("404")
	                .process(new ValidateErrorProcessor())
	             .otherwise()
		             .to("velocity:template/estudiantes/query-sobrepaso.vm")
		            	.setHeader("CamelSqlQuery").simple("${body}")
		            	.log("header sql: ${headers}")
		            	.to("direct:bannerSQL")
		            	.log("body sql: ${body}")
		            	.choice()
			         		.when(simple("${header.CamelHttpResponseCode} != 200"))
			         			.process(new ValidateErrorProcessor())
			         		.otherwise()
			         			.process(new InformacionSobrepasoProcessor())
			         			.log("verificando body final: ${body}")
			         	.end()
	         .end()
        ;
        
        
        //ruta informacion estado academico
        from("direct:informacionEstadoAcademicoRoute")
	        .to("direct:set-authentication")
	        .process(new ValidateInfoStudentProcessor())
	        .setProperty("Speriodo").simple("${headers.speriodo}")
	        .to("direct:pidmRoute")
	        .choice()
	        	.when(simple("${property.ContinueProcedure} != true"))
		        	.log(LoggingLevel.ERROR,"::::: Error en Consultar SPIDM")
		        	.setHeader("CamelHttpResponseCode").constant("404")
	                .process(new ValidateErrorProcessor())
	             .otherwise()
		             .to("velocity:template/estudiantes/query-estado-academico.vm")
		            	.setHeader("CamelSqlQuery").simple("${body}")
		            	.log("header sql: ${headers}")
		            	.to("direct:bannerSQL")
		            	.log("body sql: ${body}")
		            	.choice()
			         		.when(simple("${header.CamelHttpResponseCode} != 200"))
			         			.process(new ValidateErrorProcessor())
			         		.otherwise()
			         			.process(new InformacionEstadoAcademicoProcessor())
			         			.log("verificando body final: ${body}")
			         	.end()
	         .end()
         ;
        
        
        //informacion Personal Retenciones
        from("direct:informacionPersonalRetencionesRoute")
	        .to("direct:set-authentication")
	        .process(new ValidateParamsProcessor())
	        .setProperty("fechaInicial").simple("${header.dfechainicio}")
	        .setProperty("fechaFinal").simple("${header.dfechafin}")
	        .setProperty("sCodigo").simple("${header.scodigoRetencion}")
	        .to("direct:pidmRoute")
	        .choice()
	        	.when(simple("${property.ContinueProcedure} != true"))
		        	.log(LoggingLevel.ERROR,"::::: Error en Consultar SPIDM")
		        	.setHeader("CamelHttpResponseCode").constant("404")
	                .process(new ValidateErrorProcessor())
	             .otherwise()
		             .to("velocity:template/estudiantes/query-retencion-estudiante.vm")
		            	.setHeader("CamelSqlQuery").simple("${body}")
		            	.log("header sql: ${headers}")
		            	.to("direct:bannerSQL")
		            	.log("body sql: ${body}")
		            	.choice()
			         		.when(simple("${header.CamelHttpResponseCode} != 200"))
			         			.process(new ValidateErrorProcessor())
			         		.otherwise()
			         			.process(new InformacionPersonalRetencionesProcessor())
			         			.log("verificando body final: ${body}")
			         	.end()
	         .end()
        ;
        
     // rutas hijas de informacionDoctoral -----------------------------------------------------------------//
	       
        from("direct:obtenerPhdRangoStudent")
        .to("direct:set-authentication")
        .setProperty("status").simple("${header.status}")
    	.setProperty("status2").simple("${header.status2}")
    	.log("verificando salida i de status: ${header.status}")
    	.log("verificando salida i de status2: ${header.status2}")
    	.process(new ValidateParamsPhdProcessor())
    	.process(new StartLimitProcessor())
		.removeHeaders("*")
    	.setHeader("CamelHttpUri").simple("{{url.service.studentsPhd}}?phDStudentStatus=[${property.status},${property.status2}]")
        .to("direct:route-consume-proxy")
        .choice()
			.when(simple("${header.CamelHttpResponseCode} != 200"))
				.process(new ValidateErrorProcessor())
			.otherwise()
				.process(new InformacionDoctoralProcessor())
		.end()
        ;
        
        from("direct:obtenerPhdStatusStudent")
	        .to("direct:set-authentication")
	    	.setProperty("status").simple("${header.status}")
	        .log("verificando property status: ${property.status}")
	        .process(new ValidateParamsPhdProcessor())
	        .process(new StartLimitProcessor())
	        .removeHeaders("*")
	    	.setHeader("CamelHttpUri").simple("{{url.service.studentsPhd}}?phDStudentStatus=${property.status}&start=${property.sStart}&limit=${property.sLimit}")
	    	.to("direct:route-consume-proxy")
	        .choice()
				.when(simple("${header.CamelHttpResponseCode} != 200"))
					.process(new ValidateErrorProcessor())
				.otherwise()
					.process(new InformacionDoctoralProcessor())
			.end()
        ;
        
        from("direct:obtenerPhdCodigoStudent")
	        .to("direct:set-authentication")
	    	.setProperty("codeStudent").simple("${header.codeStudent}")
	    	.log("verificando salida i de codeStudent: ${header.codeStudent}")
	    	.process(new ValidateParamsPhdProcessor())
	    	.process(new StartLimitProcessor())
			.removeHeaders("*")
	        .log("verificando property codeStudent: ${property.codeStudent}")
	    	.setHeader("CamelHttpUri").simple("{{url.service.studentsPhd}}?codeStudent=${property.codeStudent}&start=${property.sStart}&limit=${property.sLimit}")
	    	.to("direct:route-consume-proxy")
	        .choice()
				.when(simple("${header.CamelHttpResponseCode} != 200"))
					.process(new ValidateErrorProcessor())
				.otherwise()
					.process(new InformacionDoctoralProcessor())
			.end()
	    ;
        
        from("direct:obtenerPhdNameStudent")
	        .to("direct:set-authentication")
	    	.setProperty("username").simple("${header.username}")
	    	.log("verificando salida i de username: ${header.username}")
	    	.log("verificando salida de headers ------> ${headers}")
	    	.log("verficando header de camehttpuri --> ${header.CamelHttpUri}")
	    	.process(new ValidateParamsPhdProcessor())
	    	.process(new StartLimitProcessor())
			.removeHeaders("*")
	        .log("verificando property username: ${property.username}")
	    	.setHeader("CamelHttpUri").simple("{{url.service.studentsPhd}}?username=${property.username}&start=${property.sStart}&limit=${property.sLimit}")
	    	.to("direct:route-consume-proxy")
	        .choice()
				.when(simple("${header.CamelHttpResponseCode} != 200"))
					.process(new ValidateErrorProcessor())
				.otherwise()
					.process(new InformacionDoctoralProcessor())
			.end()
	    ;
        
        from("direct:obtenerPhdFacultyStudent")
	        .to("direct:set-authentication")
	    	.setProperty("faculty").simple("${header.faculty}")
	    	.log("verificando salida i de faculty: ${header.faculty}")
	    	.process(new ValidateParamsPhdProcessor())
	    	.process(new StartLimitProcessor())
			.removeHeaders("*")
	    	.setHeader("CamelHttpUri").simple("{{url.service.studentsPhd}}?faculty=${property.faculty}&start=${property.sStart}&limit=${property.sLimit}")
	    	.to("direct:route-consume-proxy")
	    	.choice()
				.when(simple("${header.CamelHttpResponseCode} != 200"))
					.process(new ValidateErrorProcessor())
				.otherwise()
					.process(new InformacionDoctoralProcessor())
			.end()
        ;
        
        from("direct:obtenerPhdProgramStudent")
	        .to("direct:set-authentication")
	    	.setProperty("programId").simple("${header.programId}")
	    	.log("verificando salida i de programId: ${header.programId}")
	    	.process(new ValidateParamsPhdProcessor())
	    	.process(new StartLimitProcessor())
			.removeHeaders("*")
	    	.setHeader("CamelHttpUri").simple("{{url.service.studentsPhd}}?programId=${property.programId}&start=${property.sStart}&limit=${property.sLimit}")
	    	.to("direct:route-consume-proxy")
	    	.choice()
				.when(simple("${header.CamelHttpResponseCode} != 200"))
					.process(new ValidateErrorProcessor())
				.otherwise()
					.process(new InformacionDoctoralProcessor())
			.end()
    	;
        
        
        from("direct:obtenerPhdUserNameCodeStudent")
	        .to("direct:set-authentication")
	    	.setProperty("codeStudent").simple("${header.codeStudent}")
	    	.setProperty("username").simple("${header.username}")
	    	.log("verificando salida i de codeStudent: ${header.codeStudent}")
	    	.log("verificando salida i de username: ${header.username}")
	    	.process(new StartLimitProcessor())
	    	.process(new ValidateParamsPhdProcessor())
	    	.removeHeaders("*")
			.setHeader("CamelHttpUri").simple("{{url.service.studentsPhd}}?username=${property.username}&codeStudent=${property.codeStudent}&start=${property.sStart}&limit=${property.sLimit}")
			.log("verificando salida de default uri : ${header.CamelHttpUri}")
	    	.to("direct:route-consume-proxy")
	    	.choice()
				.when(simple("${header.CamelHttpResponseCode} != 200"))
					.process(new ValidateErrorProcessor())
				.otherwise()
					.process(new InformacionDoctoralProcessor())
			.end()
        ;
        
        from("direct:obtenerStartLimit")
	        .process(new StartLimitProcessor())
			.removeHeaders("*")
	        .setHeader("CamelHttpUri").simple("{{url.service.studentsPhd}}?start=${property.sStart}&limit=${property.sLimit}")
	        .to("direct:route-consume-proxy")
	    	.choice()
				.when(simple("${header.CamelHttpResponseCode} != 200"))
					.process(new ValidateErrorProcessor())
				.otherwise()
					.process(new InformacionDoctoralProcessor())
			.end()
        ;
     	 
     	 
     	// rutas hijas de   direct:informacionPersonalRoute -----------------------------------------------------------------//
	        from("direct:informacionPersonalPreguntaParametro")
	        	.setProperty("SProceso").simple("SPregunta=${headers.spregunta}")
	        	.setProperty("codigoPregunta").simple("${property.queryResponse}")
	        	.log("GET PROCESO : ${property.SProceso}")
	        	.choice()
	        		.when(simple("${property.spregunta} != null && ${property.spregunta} != ''"))
	        			.to("velocity:template/estudiantes/query-isPregunta.vm")
	        			.setHeader("CamelSqlQuery").simple("${body}")
	        			.to("direct:prescoringSQL")
		            	.log("body sql: ${body}")
		            	.process(new PreguntaParametroProcessor())
		            .otherwise()
		            	.setProperty("message").simple("{{excepcion.validacion.entrada}}")
		            	.to("direct:route-error-handler")
		        .end()
	        ;
	        
	        
	        from("direct:informacionPersonalPregunta")
	        	.choice()
	        		.when(simple("${property.Answer} == null and ${property.isPregunta} == null and ${property.Table} == null and ${property.Code} == null and ${property.Answer} == '' and ${property.isPregunta} == '' and ${property.Table} == '' and ${property.Code} == ''"))
		            	.setProperty("message").simple("{{excepcion.validacion.entrada}}")
		            	.to("direct:route-error-handler")
		            .otherwise()
	        			.to("velocity:template/estudiantes/query-parametro.vm") // aqui hay error la tabla no existe
			        	.setHeader("CamelSqlQuery").simple("${body}")
			        	.to("direct:bannerSQL")
			        	.log("body sql: ${body}")
			        	.log("headers de informacion persona pregunta: ${headers}")
			        	.choice()
			        		.when(simple("${headers.responseCode} != 200"))
			        			.process(new ValidateErrorProcessor())
			        		.otherwise()
				        		.setProperty("responsePP").simple("${body.get(0).get('SWTNIVE_DESC')}")
			        	.end()
			    .end()
	        ;
	        
	        // rutas hijas de informacion personal estudiante -----------------------------------------------------------------//
	        
	        from("direct-vm:nombrePersona")
	        	.log("verificando headers: ${headers}")
	        	.log("verificando spidm: ${property.spidm}")
	        	.to("velocity:template/estudiantes/query-nombre-persona.vm")
	        	.setHeader("CamelSqlQuery").simple("${body}")
	        	.log("header sql: ${headers}")
	        	.to("direct:bannerSQL")
	        	.log("body sql: ${body}")
	        	.choice()
	        		.when(simple("${header.CamelHttpResponseCode} == 200"))
	        			.setProperty("namesPerson").simple("${body}")
	        			.log("verificando property nombresPersona: ${property.namesPerson}")
	        		.otherwise()
	        			.process(new ValidateErrorProcessor())
	        	.end()
	        ;
	}

}
