package co.edu.uniandes.fuse.api.academico.routes;

import org.apache.camel.LoggingLevel;
import org.apache.camel.model.dataformat.JsonLibrary;
import org.apache.camel.model.rest.RestParamType;

import co.edu.uniandes.fuse.api.academico.beans.creditos.CreditosService;
import co.edu.uniandes.fuse.api.academico.beans.creditos.ValidateParamsCreditosService;
import co.edu.uniandes.fuse.api.academico.models.creditos.CreditosAp;
import co.edu.uniandes.fuse.api.academico.models.creditos.CreditosApHomologSemestre;
import co.edu.uniandes.fuse.api.academico.models.creditos.CreditosApHomologados;
import co.edu.uniandes.fuse.api.academico.models.creditos.CreditosApSemestre;
import co.edu.uniandes.fuse.api.academico.models.creditos.CreditosApTransferidos;
import co.edu.uniandes.fuse.api.academico.models.creditos.CreditosInsSemestre;
import co.edu.uniandes.fuse.api.academico.models.creditos.CreditosInt;
import co.edu.uniandes.fuse.api.academico.models.creditos.CreditosIntHomologados;
import co.edu.uniandes.fuse.api.academico.models.creditos.CreditosSemCreditos;
import co.edu.uniandes.fuse.api.academico.models.creditos.TransferenciaRequest;
import co.edu.uniandes.fuse.api.academico.models.creditos.TransferenciaResponse;
import co.edu.uniandes.fuse.core.utils.models.ErrorResponse;

public class CreditosRoute  extends RestConfiguration {
	
	public void configure() throws Exception {
		
		// EXCEPTIONS       
        onException(Exception.class)
             .handled(true)
             .to("direct-vm:manageException")
        ;
		
		// REST & SWAGGER COMPONENTS	
		rest("/creditos").description("Consulta de informaci&oacute;n de egresados")		
			
			// transferencias		
			.post("/transferir")
				.description("Transferencia de creditos para un estudiante")				
				.consumes("application/json").produces("application/json")
				.type(TransferenciaRequest.class)
				.outType(TransferenciaResponse.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:postTransferenciaCreditos")
			
			.get("/{id}/aprobados")
				.description("Consulta cr&eacute;ditos aprobados  de un estudiante y la suma de cr&eacute;ditos homologados si es necesario.")				
	        	.consumes("application/json").produces("application/json")
		        	.param()
						.name("id").description("Login o c&oacute;digo de la persona")
					.endParam()
					.param()
					  	.name("periodo").description("Periodo<br> *ej: 201610*")
					  	.type(RestParamType.query)				  	
					  	.required(true)
				  	.endParam()
					.param()
					  	.name("nivel").description("nivel academico del estudiante.<br> *ej: PR")
					  	.type(RestParamType.query)				  	
					  	.required(true)
					.endParam()
					.param()
					  	.name("sumHomologados").description("Especifica si se suman los creditos homologados.<br> *ej: true/false")
					  	.type(RestParamType.query)				  	
					  	.required(false)
				  	.endParam()
				.outType(CreditosAp.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:getAprobados")
				
			.get("/{id}/aprobados/homologados")
				.description("Consulta cr&eacute;ditos aprobados homologados de un estudiante.")				
	        	.consumes("application/json").produces("application/json")
		        	.param()
						.name("id").description("Login o c&oacute;digo de la persona")
					.endParam()
					.param()
					  	.name("periodo").description("Periodo<br> *ej: 201620*")
					  	.type(RestParamType.query)				  	
					  	.required(false)
				  	.endParam()
					.param()
					  	.name("nivel").description("nivel academico del estudiante.<br> *ej: MA")
					  	.type(RestParamType.query)				  	
					  	.required(false)
					.endParam()
				.outType(CreditosApHomologados.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:getAprobadosHomologados")
			
			.get("/{id}/aprobados/homologados-semestre")
				.description("Consulta cr&eacute;ditos aprobados homologados de un estudiante.")				
	        	.consumes("application/json").produces("application/json")
		        	.param()
						.name("id").description("Login o c&oacute;digo de la persona")
					.endParam()
					.param()
					  	.name("periodo").description("Periodo<br> *ej: 201620*")
					  	.type(RestParamType.query)				  	
					  	.required(true)
				  	.endParam()
					.param()
					  	.name("nivel").description("nivel academico del estudiante.<br> *ej: MA")
					  	.type(RestParamType.query)				  	
					  	.required(true)
					.endParam()
				.outType(CreditosApHomologSemestre.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:getAprobadosHomologadosSemestre")
				
			.get("/{id}/aprobados/semestre")
				.description("Consulta cr&eacute;ditos aprobados de un estudiante.")				
	        	.consumes("application/json").produces("application/json")
		        	.param()
						.name("id").description("Login o c&oacute;digo de la persona")
					.endParam()
					.param()
					  	.name("periodo").description("Periodo<br> *ej: 201620*")
					  	.type(RestParamType.query)				  	
					  	.required(true)
				  	.endParam()
					.param()
					  	.name("nivel").description("nivel academico del estudiante.<br> *ej: MA")
					  	.type(RestParamType.query)				  	
					  	.required(true)
					.endParam()
				.outType(CreditosApSemestre.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:getAprobadosSemestre")
				
			.get("/{id}/aprobados/transferidos")
				.description("Consulta cr&eacute;ditos aprobados de un estudiante.")				
	        	.consumes("application/json").produces("application/json")
		        	.param()
						.name("id").description("Login o c&oacute;digo de la persona")
					.endParam()
					.param()
					  	.name("periodo").description("Periodo<br> *ej: 201620*")
					  	.type(RestParamType.query)				  	
					  	.required(false)
				  	.endParam()
					.param()
					  	.name("nivel").description("nivel academico del estudiante.<br> *ej: MA")
					  	.type(RestParamType.query)				  	
					  	.required(false)
					.endParam()
				.outType(CreditosApTransferidos.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:getAprobadosTransferidos")
			
			.get("/{id}/inscritos/semestre")
				.description("Consulta cr&eacute;ditos aprobados de un estudiante.")				
	        	.consumes("application/json").produces("application/json")
		        	.param()
						.name("id").description("Login o c&oacute;digo de la persona")
					.endParam()
					.param()
					  	.name("periodo").description("Periodo<br> *ej: 201620*")
					  	.type(RestParamType.query)				  	
					  	.required(false)
				  	.endParam()
					.param()
					  	.name("nivel").description("nivel academico del estudiante.<br> *ej: MA")
					  	.type(RestParamType.query)				  	
					  	.required(false)
					.endParam()
				.outType(CreditosInsSemestre.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:getInscritosSemestre")
				
			.get("/{id}/intentados")
				.description("Consulta cr&eacute;ditos aprobados de un estudiante.")				
	        	.consumes("application/json").produces("application/json")
		        	.param()
						.name("id").description("Login o identificaci&oacute;n de la persona")
					.endParam()
					.param()
					  	.name("periodo").description("Periodo<br> *ej: 201310*")
					  	.type(RestParamType.query)				  	
					  	.required(true)
				  	.endParam()
					.param()
					  	.name("nivel").description("nivel academico del estudiante.<br> *ej: PR")
					  	.type(RestParamType.query)				  	
					  	.required(true)
					.endParam()
					.param()
					  	.name("sumHomologados").description("Especifica si se suman los creditos homologados.<br> *ej: true/false")
					  	.type(RestParamType.query)				  	
					  	.required(true)
				  	.endParam()
				.outType(CreditosInt.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:getIntentados")
				
			.get("/{id}/intentados/semestre")
				.description("Consulta cr&eacute;ditos aprobados de un estudiante.")				
	        	.consumes("application/json").produces("application/json")
		        	.param()
						.name("id").description("Login o identificaci&oacute;n de la persona <br> *ej: s.baez879 &oacute; 1019095827")
					.endParam()
					.param()
					  	.name("nivel").description("nivel academico del estudiante.<br> *ej: PR")
					  	.type(RestParamType.query)				  	
					  	.required(true)
					.endParam()
				.outType(CreditosInt.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:getIntentadosSemestre")
				
			.get("/{id}/intentados/homologados")
				.description("Consulta cr&eacute;ditos aprobados de un estudiante.")				
	        	.consumes("application/json").produces("application/json")
		        	.param()
						.name("id").description("Login o documento identificaci&oacute;n de la persona <br> *ej: s.baez879/1019095827")
					.endParam()
					.param()
					  	.name("periodo").description("Periodo<br> *ej: 201310*")
					  	.type(RestParamType.query)				  	
					  	.required(true)
				  	.endParam()
					.param()
					  	.name("nivel").description("nivel academico del estudiante.<br> *ej: MA")
					  	.type(RestParamType.query)				  	
					  	.required(true)
					.endParam()
				.outType(CreditosIntHomologados.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:getIntentadosHomologados")
				
			.get("/{id}/intentados/homologados-semestre")
				.description("Consulta cr&eacute;ditos aprobados de un estudiante.")				
	        	.consumes("application/json").produces("application/json")
		        	.param()
						.name("id").description("Login o identificaci&oacute;n de la persona <br> *ej: s.baez879/1019095827")
					.endParam()
					.param()
					  	.name("periodo").description("Periodo<br> *ej: 201610*")
					  	.type(RestParamType.query)				  	
					  	.required(true)
				  	.endParam()
					.param()
					  	.name("nivel").description("nivel academico del estudiante.<br> *ej: MA")
					  	.type(RestParamType.query)				  	
					  	.required(true)
					.endParam()
				.outType(CreditosIntHomologados.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:getIntentadosHomologadosSemestre")
				
			.get("/{id}/semestre")
				.description("Consulta el semestre de un estudiante seg&uacute;n los creditos a partir de datos acad&eacute;micos.")				
	        	.consumes("application/json").produces("application/json")
		        	.param()
						.name("id").description("Login o identificaci&oacute;n de la persona <br> *ej: s.baez879/1019095827")
					.endParam()
					.param()
					  	.name("creditosIntentados").description("Cr&eacute;ditos intentados. <br> *ej: 32*")
					  	.type(RestParamType.query)				  	
					  	.required(true)
				  	.endParam()
					.param()
					  	.name("codigoPrograma").description("nivel academico del estudiante.<br> *ej: MATE")
					  	.type(RestParamType.query)				  	
					  	.required(true)
					.endParam()
				.outType(CreditosSemCreditos.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:getSemestre")
				
			.get("/{id}/semestre/calcular-semestre")
				.description("Consulta cr&eacute;ditos aprobados de un estudiante.")				
	        	.consumes("application/json").produces("application/json")
		        	.param()
						.name("id").description("Login o identificaci&oacute;n de la persona <br> *ej: s.baez879/1019095827")
					.endParam()
					.param()
					  	.name("periodo").description("Periodo<br> *ej: 201610*")
					  	.type(RestParamType.query)				  	
					  	.required(true)
				  	.endParam()
				.outType(CreditosSemCreditos.class)
				.responseMessage().code("000").message("300 - Redirect<br>400 - Client Error<br>500 - Server Error").responseModel(ErrorResponse.class).endResponseMessage()
				.to("direct:getSemestreCalculo")
				
				
				
		;

		// REST & SWAGGER COMPONENTS				
			// ROUTE CREDITOS
			
			from("direct:postTransferenciaCreditos")
			    .log("Body:: ${body.pidm}")
				.to("velocity:template/creditos/query_transferir_creditos.vm")
				 .log("Body:: ${body}")
				.setHeader("CamelSqlQuery").simple("${body}")
				.to("direct:homologacionesSQL") 
				.bean(CreditosService.class, "postTransferenciaCreditos")
		        //.wireTap("mock:outputPostTransferenciaCreditos")
			;	
			
			from("direct:getAprobadosHomologados")
				.log("entrando a direct:getAprobadosHomologados")
				.bean(ValidateParamsCreditosService.class, "validatePerNiv")
				.to("direct-vm:validaPIDM")
				.to("velocity:template/creditos/query_aprobados_homologados.vm")
				.setHeader("CamelSqlQuery").simple("${body}")
				.to("direct:bannerSQL")
				.removeHeaders("*")
				.bean(CreditosService.class, "getAprobadosHomologados")
				
			;
			
			from("direct:getAprobadosHomologadosSemestre")
				.bean(ValidateParamsCreditosService.class, "validatePerNiv")
				.to("direct-vm:validaPIDM")
				.to("velocity:template/creditos/query_aprobados_homologados_semestre.vm")
				.setHeader("CamelSqlQuery").simple("${body}")
				.to("direct:bannerSQL")
				.removeHeaders("*")
				.bean(CreditosService.class, "getAprobadosHomologadosSemestre")
				
			;
			
			from("direct:getAprobados")
				.bean(ValidateParamsCreditosService.class, "validatePerNiv")
				.setProperty("sumHomologados", simple("${headers.sumHomologados}"))
				.setProperty("id", simple("${headers.id}"))
				.to("direct-vm:validaPIDM")
				.choice()
					.when(simple("${property.sumHomologados} == true && ${property.sumHomologados} != null"))
						.setHeader("periodo", simple("${property.periodo}"))
						.setHeader("nivel", simple("${property.nivel}"))
						.setHeader("id", simple("${property.id}"))
						.to("direct:getAprobadosHomologados")
						.marshal().json(JsonLibrary.Jackson)
						.setProperty("resulltAH").jsonpath("$.Creditos.CreditosHomologados",true, String.class)
						.log("property rah: ${property.resulltAH}")
					.otherwise()
						.log("ENTRANDO A OTHERWISE")
						.to("velocity:template/creditos/query_aprobados.vm")
						.setHeader("CamelSqlQuery").simple("${body}")
						.to("direct:bannerSQL")
						.log("verificando body de sql: ${body}")
				.end()
				//.removeHeaders("*")
				.bean(CreditosService.class, "getAprobados")
				.log("saliendo de bean body: ${body}")
			;
			
			from("direct:getAprobadosSemestre")
				.bean(ValidateParamsCreditosService.class, "validatePerNiv")
				.to("direct-vm:validaPIDM")
				.to("velocity:template/creditos/query_aprobados_semestre.vm")
				.setHeader("CamelSqlQuery").simple("${body}")
				.to("direct:bannerSQL")
				.log("verificando body de sql: ${body} ")
				.removeHeaders("*")
				.bean(CreditosService.class, "getAprobadosSemestre")
				
			;
			
			from("direct:getAprobadosTransferidos")
				.bean(ValidateParamsCreditosService.class, "validateId")
				.setProperty("periodo", header("periodo"))
				.setProperty("nivel", header("nivel"))
				.to("direct-vm:validaPIDM")
				.to("velocity:template/creditos/query_aprobados_transferidos.vm")
				.setHeader("CamelSqlQuery").simple("${body}")
				.to("direct:bannerSQL")
				.log("verificando body de sql: ${body} ")
				.removeHeaders("*")
				.bean(CreditosService.class, "getAprobadosTransferidos")
			;
			
			from("direct:getInscritosSemestre")
				.bean(ValidateParamsCreditosService.class, "validateId")
				.setProperty("periodo", header("periodo"))
				.setProperty("nivel", header("nivel"))
				.to("direct-vm:validaPIDM")
				.to("velocity:template/creditos/query_inscritos_semestre_actual.vm")
				.setHeader("CamelSqlQuery").simple("${body}")
				.to("direct:bannerSQL")
				.log("verificando body de sql: ${body} ")
				.removeHeaders("*")
				.bean(CreditosService.class, "getInscritosSemestre")
			;
			
			from("direct:getIntentados")
				.bean(ValidateParamsCreditosService.class, "validatePerNiv")
				.setProperty("sumHomologados", simple("${headers.sumHomologados}"))
				.setProperty("id", simple("${headers.id}"))
				.to("direct-vm:validaPIDM")
				.choice()
					.when(simple("${property.sumHomologados} == true && ${property.sumHomologados} != null"))
						.setHeader("periodo", simple("${property.periodo}"))
						.setHeader("nivel", simple("${property.nivel}"))
						.setHeader("id", simple("${property.id}"))
						.to("direct:getIntentadosHomologados")
						.marshal().json(JsonLibrary.Jackson)
						.setProperty("resulltIH").jsonpath("$.Creditos.CreditosHomologados",true, String.class)
						.log("property rih: ${property.resulltIH}")
					.otherwise()
						.log("ENTRANDO A OTHERWISE")
						.to("velocity:template/creditos/query_intentados.vm")
						.setHeader("CamelSqlQuery").simple("${body}")
						.to("direct:bannerSQL")
						
				.end()
				.removeHeaders("*")
				.bean(CreditosService.class, "getIntentados")
			;
			
			from("direct:getIntentadosSemestre")
				.bean(ValidateParamsCreditosService.class, "validateId")
				.setProperty("periodo", header("periodo"))
				.setProperty("nivel", header("nivel"))
				.to("direct-vm:validaPIDM")
				.to("velocity:template/creditos/query_intentados_s.vm")
				.setHeader("CamelSqlQuery").simple("${body}")
				.to("direct:bannerSQL")
				.log("verificando body de sql: ${body} ")
				.removeHeaders("*")
				.bean(CreditosService.class, "getIntentadosSemestre")
			;
			
			from("direct:getIntentadosHomologados")
				.bean(ValidateParamsCreditosService.class, "validatePerNiv")
				.to("direct-vm:validaPIDM")
				.to("velocity:template/creditos/query_intentados_h.vm")
				.setHeader("CamelSqlQuery").simple("${body}")
				.to("direct:bannerSQL")
				.log("verificando body de sql: ${body} ")
				.removeHeaders("*")
				.bean(CreditosService.class, "getIntentadosHomologados")
			;
			
			from("direct:getIntentadosHomologadosSemestre")
				.bean(ValidateParamsCreditosService.class, "validatePerNiv")
				.to("direct-vm:validaPIDM")
				.to("velocity:template/creditos/query_intentados_h_semestre.vm")
				.setHeader("CamelSqlQuery").simple("${body}")
				.to("direct:bannerSQL")
				.log("verificando body de sql: ${body} ")
				.removeHeaders("*")
				.bean(CreditosService.class, "getIntentadosHomologadosSemestre")
			;
			
			
			//------------------- terminar despeus de haber acabado calcular semestre segun creditos
			from("direct:getSemestre")
				.bean(ValidateParamsCreditosService.class, "validateCodCred")
				//.log("verificando headers antes de pidm: ${headers}")
				.to("direct-vm:validaPIDM")
				//.log("verificando headers despues de pidm: ${headers}")
				.to("velocity:template/creditos/query_codigo_por_pidm.vm")
				.setHeader("CamelSqlQuery").simple("${body}")
				.to("direct:bannerSQL")
				//.log("verificando body de sql: ${body} ")
				.marshal().json(JsonLibrary.Jackson)
				.choice()
					.when(body().isNull())
						.log(LoggingLevel.ERROR,"::::: Error en Consultar CODIGO ESTUDIANTE")
		    			.setProperty("message", simple("{{excepcion.codeStudent.not.found}}"))
		    			.to("direct:route-error-handler")
		    		.otherwise()
		    			.setProperty("CodeStudent").jsonpath("$.[0].SPRIDEN_ID", true, String.class)
		    			//.log("verificando property de codigo estudiante: ${property.CodeStudent}")
		    			//.log("verificando propertis headers: creditosInt :${property.creditosIntentados} y codigoPrograma: ${property.codigoPrograma}")
		    			.to("velocity:template/creditos/query_semestre_por_creditos.vm")
						.setHeader("CamelSqlQuery").simple("${body}")
						.to("direct:bannerSQL")
						//.log("verificando body de sql: ${body} ")
						.bean(CreditosService.class, "getSemestre")
		    	.end()
					
			;
			
			//-----------------------------------------------------------------------------------
			
			from("direct:getSemestreCalculo")
				.bean(ValidateParamsCreditosService.class, "validatePer")
				.setProperty("id", simple("${headers.id}"))
				.log("verificando periodo : ${property.periodo}")
					.toD("direct-vm:getProgramasEstudiante")
						.marshal().json(JsonLibrary.Jackson)
						.log("verificando el body : ${body}")
						.setProperty("codigoPrograma").jsonpath("$.[0].codigoDepartamento",true, String.class)
						.setProperty("nivel").jsonpath("$.[0].nivel",true, String.class)
						.log("verificando proeprties: codigoPrograma:${property.codigoPrograma}, nivelEstudiante: ${property.nivelEstudiante}, pidm: ${property.PIDM}")
					.setHeader("id", simple("${property.id}"))
					.setHeader("periodo", simple("${property.periodo}"))
					.setHeader("nivel", simple("${property.nivel}"))
					
					.to("direct:getInscritosSemestre")
						.marshal().json(JsonLibrary.Jackson)
						.log("verificando el body : ${body}")
						.setProperty("cInscritos").jsonpath("$.Creditos.CreditosInscritos", true, String.class)
						.log("verificando property: cInscritos: ${property.cInscritos}")
					.setHeader("codigoPrograma", simple("${property.codigoPrograma}"))
					.setHeader("creditosIntentados", simple("${property.cInscritos}"))
					.to("direct:getSemestre")
						.marshal().json(JsonLibrary.Jackson)
						.log("verificando el body : ${body}")
						.setProperty("cInscritos").jsonpath("$.Creditos.SemestreSegunCreditos", true, String.class)
						.log("verificando property: cInscritos: ${property.cInscritos}")
				.removeHeaders("*")
				.bean(CreditosService.class, "getSemestreCalculoPeriodo")	
			;
			
			
			
	
	}
}
